---
title: "Lab 1: an introduction to R"
subtitle: Entomology 5126 - Spring 2026
author: Jeremy Hemberger and Brian Aukema
date: last-modified
date-format: long
format: html
highlight-style: ayu
---

## Frontmatter

<p class="buttons" style="text-align:left;">

[{{< fa download >}} [Download lab data](/lab/data/lab1.csv)]{.btn .btn-outline-warning} [{{< fa brands r-project title="R Project">}} [Download R project file](/lab/data/lab1.csv)]{.btn .btn-outline-warning}

</p>

## R

`R` is a software environment for statistical computing and graphics. It's also a word that pirates say, but that's not important right now. `R` is the best statistical software available, is free, and runs on Windows, Macintosh, and Linux platforms. `R` may be downloaded for personal use from `http://www.r-project.org`. `R` is open-source, which means that many people work on it around the world and are constantly improving it. Updated versions are released on the website every 2 months or so. If there is an advancement in statistics, it is incorporated rapidly.

## Installing packages

Like ecology, there are many subdisciplines of statistics. `R` comes as a 'base' package. Depending on what you want to do, this may be sufficient. Often, however, you will need to install a contributed addition to do more specialized tasks, like spatial or temporal analyses. These additions are called "packages." Think of statistics as creating a recipe to analyze your data, where `R` is an oven to bake your creation. Packages, then, are extra features you can add to the oven (e.g., air fryer, stainless steel griddle, extra burner, etc.) if your recipe needs it. You can either use the "Load package" command from the "Packages" menu, or you can simply type

```         
library(whateverpackageyouneed)
```

In today's lab, you will not need any extra packages.

## Making mistakes

`R` is very powerful, and is not always very friendly to beginners. But if you start slow, and master a few skills early on, you will find that it is not overly burdensome (and you may even find yourself enjoying it).

When `R` executes a command, you will either see a new command prompt on the next line, or the output of what you requested. If you make a syntax error (i.e., ask `R` to do something it does not understand), you will get an error. Simply retype the command, correcting your mistake (did you miss a comma, quote, or parenthesis?).

## Getting help

Fortunately, `R` has LOTS of help. Here are some good ways to obtain help if you are really stuck:

-   Look hard at your screen. Is the mistake obvious (see cartoon below)?

-   Consult a classmate.

-   Ask me.

-   Consult a help manual or book.

-   Ask the internet.

-   Ask ChatGPT. In all seriousness, troubleshooting error codes is an excellent use of GenAI tools as it can quickly aggregate information from a bunch of different sources that you might otherwise find yourself after great effort. The key here is, once you find the error/solution to the issue, internalizing what exactly it is that went wrong and why.

-   Type in a question mark before the command you are trying to use. For example, `?summary` provides help on the "summary" command. This is a good way to find all of the arguments that may be used with a command, for example. Unfortunately, you may find that the help files are most useful if you are already experienced with `R`.

-   Ask the R-help mailing list (the email address can be found through the R website, `www.r-project.org`). You will generally get a response in an hour or less, at any time day or night, because there are millions of useRs around the world. Often, however, the answers are provided by experienced R users, who *may* speak more Math than English and may have maladapted social skills.

[![Pro tip: 95.6% of the time, a silly spelling or syntax error is the reason behind your code is not working](/media/images/coding-error-spelling.png){fig-align="center"}](https://allisonhorst.com/everything-else)

### Pro tip: Keep notes!

It is a good idea to keep a notes while you work. As our analyses get progressively more difficult this semester, you will find yourself needing commands from earlier in the semester. If you make your own notes of tricks and techniques that you know worked (e.g., what was the simple command I used to read in data? can I copy and paste it later?), it can avert lots of headaches in the future. What I do with every single project I am working on, is create a `project_notes` R Notebook file. I treat this like a digital lab notebook, recording what I do each day, issues I'm running into, ideas for future analyses or figures to make, a checklist of tasks I have yet to accomplish, and as a sandbox to play with analysis ideas/building skeletons of functions. 

## Working with batch files ("R scripts")

A common method of statistical analysis uses "batch files." This is a rather old, but effective, way of conducting analyses. Essentially, one writes the programming code and sends it to the statistical software, either line by line or in large chunks. The computer runs the code, and then gives the output. That could include error messages (hopefully not!), or the answer to your analysis. The really nice thing about a batch file is that you can save it for later, and always rerun the analysis later. Think of it like writing a recipe (batch file) before putting your creation into the oven (`R`).\\ The most common batch file interface in `R` is `RStudio` available from `http://www.rstudio.com`. `RStudio` is a free and open source integrated development environment (IDE) for `R`. You can run it on your desktop (Windows, Mac, or Linux) or even over the web using RStudio Server.\\ With `RStudio`, you can write your batch code on one window, and then send directly to `R` that is running in another window (Ctrl-Enter to send a single line). You can easily save and reload your analyses later by saving the batch file with a ".R" file extension. `RStudio` also has the advantage of syntactic highlighting. That is, when you mouse over a parenthesis, quotes, etc., the program will highlight its partner. It is an easy way to keep track of missing punctuation that can drive a computer program (and the user!) crazy.\\ Open R studio and create a new R script (File/New File/R script...). First, save it somewhere so that you can find it back later (File/Save As...). The file will have a `.R` file extension that designates it as an R coding script file. You should now have a blank file named `iLOVElearning.R` or similar. Now close it (File/Close...).

## Sending code to R

Open your blank file again (File/Open...). See how easy it is to pick up where you left off? In the top of the blank file, write:

```         
2+2
```

While your cursor is on the `2 + 2` line, hold down `Ctrl` and then press `Enter` to send the code from the script to `R` below. In the `R` console, you should see

```         
> 2+2
[1] 4
```

Change your code to a different instruction, such as `2 + 3`, and send that to the R console. Easy, eh? Save your script file, then close it.

## Annotating code

When writing code, it is helpful to include comments to yourself so that you can remember what you were doing, why, when, and so on. In `R`, you can comment anything by first using a \# sign. Anything after the \# sign is not executed. So, if you were to type in:

```         
3 + 3
```

R would spit out

```         
> 6
```

And, if you were to type in

```         
3 + 3   # My first attempt at R, January 19, 2024
```

you would also simply get

```         
> 6
```

Open the file that you just closed. Write as follows:

```         
#####################
## I am learning R
## This is lab one
## My name
## January 19, 2024
#####################
​
## My first code starts here ##
2+2
```

This is good practice when analyzing *any* data set. My code is always annotated where I read in data, conduct exploratory data analysis, manipulate variables, and so on. Do the same for your homeworks, and your thesis/dissertation analyses. Your future self will thank you! 

Keep in mind, comments are meant to clarify your code/objects in your code, not act as an extensive note-taking tool. Start a `project_notes` file for stuff like that! Comments should help either future you, or someone else who has never met you, run your code successfully and understand its purpose.

## Object-oriented programming

R uses something called "object-oriented" programming. This means that you assign names to various pieces of your data and analyses. You can name things whatever you want to help you keep track. Analyses are performed on these objects, one command at a time through something called a "command line interface." It's like a batch file in slow motion: if there is an error, you will see it instantly.\\ To assign names to various pieces of your data or analyses, simply use an arrow (`<-`), or an equal sign if you prefer. This will become clear below.

## Commands in `R`

Most commands in `R` use parentheses to specify the arguments (arguments are like options). If there are no arugments, the parentheses are still necessary. A common syntax error is forgetting the right parenthesis. One command you will might use to close `R` at the end of the session (if you don't want to use the file menu) might be `quit()`, for example.

## Entering data by hand

`R` is like an overgrown calculator, really. Simple calculations are straightforward, and you can sometimes guess at any commands or operators you need (like `sqrt()`). You can stick numbers together using a technique called "concatenation." To stick the numbers together in a "vector" (list of numbers, like a spreadsheet column), name the vector, and use the concatenate command:

```         
myniftyvector <- c(1,2,3,4,5)
```

Send that to the `R` console with `Ctrl+Enter`. Then if you type and send

```         
myniftyvector
```

you will get

```         
[1] 1 2 3 4 5
```

You have just created your first object!

## Entering data into `R`

Ok, seriously, if you have lots of data, you are not going to enter it like that. An easy way is to transfer it from a spreadsheet. When R reads a spreadsheet into memory, it goes into what is called a "dataframe." Dataframes are essentially a collection of "vectors" or lists of numbers. So, each variable and its column is a vector, and all of them side-by-side in the spreadsheet make a dataframe.\\

### Loading Excel files directly into `R`

Disclaimer; I do not use or recommend this method because there are a few "point and click" steps that are difficult to reproduce if you forget a step. I include it because many people use this method and is simple for small datasets.\\ `R Studio` has a tab labeled "Import Dataset" from which one can choose importation from an Excel spreadsheet. Once the file is identified, the data will be shown in a Data Preview screen. You can make adjustments (identifying rows or columns to exclude, for example), by editing options or clicking buttons at the bottom of the screen under Import Options. Notice that as you change options (e.g., excluding the first row as column names), the code that imports the data (bottom right pane) changes.\\ In the interest of *reproducible results*, I start with a simple text file and write the accompanying code to load that data set directly. Then I never have to worry about changes to the recipe. That method is shown below.\\

### Loading plain text files directly into `R`

At the bottom of every Excel spreadsheet are tabs. I keep three tabs in every Excel spreadsheet.\\ In the *first* tab, I keep all **metadata** or records of what the variables mean, how the data were collected, and so on. The *second* tab might contain the raw data as collected, and might be a little messy, perhaps with a final column of notes. The *third* tab is a cleaned version of my data in logical or rectangular record format, with proper column headers (just text, no special characters). To avoid problems, keep column titles to one word each. Make sure each one is different. **Pay attention to capitalization vs. small case: if your spreadsheet column is named "Year," then R will not understand if you later ask for the column named "year."** Also, avoid special characters in your column titles.\\ When preparing to import data, I first save my spreadsheet as as a regular Excel file so that Excel saves all of the tabs. I then go to the final tab where I have my cleaned data, ready for import and analysis. For this tab, I save it as a plain, tab-delimited text file (File/Save As... then choose file type as `Text (tab delimited) (*.txt)`.\\ To load data into R, I use the `read.table()` command, for example:

```         
myniftydata <- read.table("D:/path/data.txt", header=T, sep="\t", na.strings=".")
```

By using object-oriented programming, your data set can be referred to simply as `myniftydata` from now on. The `read.table()` command reads data files. Inside the parentheses, you provide the *arguments* separated by commas.\\

-   The first argument is the path to the data file. Enclose the path in quotes. You can make this whatever you'd like; R can read data off a network drive (H:/), your USB memory stick, or even the internet (instead of a file name, use `http://www.whateverpath.com/file.txt`).\\

-   The `header` argument is a logical True or False that indicates whether your data set contains column titles. You may abbreviate the answer to simply `T` or `F`.

-   The `sep` command specifies the delimiter between columns. You can change this as needed, of course. Space delimited files (sometimes called \*.dat files) are `sep=" "` while comma separated files (often named \*.csv files in Microsoft Excel) are `sep=","`. Because there is no "tab" character on the keyboard (like a space or comma), tab-delimited files are specified in a special way: ``` sep="\``t" ```.

-   The `na.strings="."` argument tells `R` what denotes your missing data. A period is a good symbol to use, although sometimes asterisks or special numbers are used. In climatological data, -9 or some similar identifier is frequently used. `R` will take these values and change them to NA.

## Checking data

Once you get the data read into `R`, it is a good idea to check the data. There are several commands you could use, including:\\

-   `dim(myniftydata)` returns the number of rows and columns in the dataframe.

-   `nrow(myniftydata)` returns the number of rows.

-   `ncol(myniftydata)` returns the number of columns.

-   `head(myniftydata)` returns the first five rows.

-   `tail(myniftydata)` returns the last five rows.

Perhaps the most useful command is

```         
summary(myniftydata)
```

This command summarizes the dataset you have just input (or whatever object happens to be specified - it is a very versatile command). For a dataset, `R` will list all the different variables, along with brief summary statistics for each. This is the best command to spot problems. All **numerical columns** will appear with summary statistics min, max, mean, etc. All columns with text, that are often indicative of **categorical** variables (next week's lab), will appear with the number of observations and type of variable (i.e., character). (Value added: if you or one of your classmates knows how to convert a character column to a categorical factor variable right now, note how the `summary()` output changes!). If you input numerical data and see a frequency list from a summary command, there is a good chance that there is a nonnumber somewhere in the column. Check the original data, correct the mistake, and try again.\\

## Sub-setting data

Quite often, we want to perform an operation or analysis on only one portion of the data. `R` uses indexing to select variables, in a scheme like this:

```         
myniftydata[rowsIwant, columnsIwant]
```

It's relatively simple to select various rows or columns. You can either name them, or use the indexing position. A comma separates the row from the column arguments.\\ `> myniftydata[1:5,2]` selects the first 5 rows in the 2nd column.\\ `> myniftydata[-3,2]` selects all rows EXCEPT the 3rd, in the 2nd column.\\ `> myniftydata[,2:6]` selects all rows and columns 2 through 6.\\ `> myniftydata[3:5,]` selects rows 3 to 5 of all columns.\\ `> myniftydata[1:5, c("year","trial")]` selects the first 5 rows of two columns named "year" and "trial."\\ The commands above use base `R`. Packages such as `tidyR` have exploded in popularity in the last decade and use a slightly different syntax. Our TA, Audrey, is a *great* resource for questions about the Tidyverse!\\

## Objects in memory

You can always view objects in memory using the `ls()` command. To delete a specific object from memory, such as `mydata`, type `remove(mydata)`. Generally, you should not need to do this unless you are working with multiple copies of HUGE datasets and `R` tells you it has run out of computer memory. To remove all objects from memory, type `remove(list=ls())`.\\

## Data sets for assignments

The datasets for each class may be found on Canvas. Download the file to your workspace (e.g., USB drive, network space, laptop, etc). You may want to create a folder for this class named `ENT5126` or `iLOVEstats` or something similar and putting all data files there (including your R scripts). Then you can use this file path:\\ `"D:/ENT5126/whateverdatafile.txt"` (change the drive, depending on where your data resides). Note that when specifying data pathways in the `read.table()` command, the slashes must be *forward*!

## Assignment

Data for a rodent toxicology study are stored in a spreadsheet named `Lab1data.xls`. The assignment is simple (?): open the data, clean it up, and import it into `R`.\\ Please\\

1.  List all of the errors that you have found in the data.

2.  Provide a copy of a printout of the spreadsheet containing the metadata.

3.  Provide a copy of a printout of the data in rectangular record format, ready for export to `R`.

4.  Provide a printout of the `summary()` command for the data from `R`, once you have read it in.

5.  Pretend that were working with European data where the decimals in the pulse column were not periods but rather commas. How would you adapt the `read.table()` command?